# Generated by Django 5.0.4 on 2025-05-17 01:30

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('coach_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('faName', models.CharField(blank=True, max_length=500, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('birth_place', models.CharField(blank=True, max_length=500, null=True)),
                ('birth_faPlace', models.CharField(blank=True, max_length=500, null=True)),
                ('birth_country', models.CharField(blank=True, max_length=500, null=True)),
                ('birth_faCountry', models.CharField(blank=True, max_length=500, null=True)),
                ('nationality', models.CharField(blank=True, max_length=500, null=True)),
                ('faNationality', models.CharField(blank=True, max_length=500, null=True)),
                ('photo', models.URLField(blank=True, null=True)),
                ('career', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('league_id', models.IntegerField(primary_key=True, serialize=False)),
                ('symbol', models.CharField(blank=True, max_length=500, null=True)),
                ('league_enName', models.CharField(blank=True, max_length=500, null=True)),
                ('league_faName', models.CharField(blank=True, max_length=500, null=True)),
                ('league_type', models.CharField(blank=True, max_length=50, null=True)),
                ('league_logo', models.URLField(blank=True, null=True)),
                ('league_country', models.JSONField()),
                ('league_faCountry', models.CharField(blank=True, max_length=500, null=True)),
                ('league_country_flag', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('faName', models.CharField(blank=True, max_length=500, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('birthDate', models.DateField(blank=True, null=True)),
                ('birthPlace', models.CharField(blank=True, max_length=500, null=True)),
                ('faBirthPlace', models.CharField(blank=True, max_length=500, null=True)),
                ('birthCountry', models.CharField(blank=True, max_length=500, null=True)),
                ('faBirthCountry', models.CharField(blank=True, max_length=500, null=True)),
                ('nationality', models.CharField(blank=True, max_length=500, null=True)),
                ('faNationality', models.CharField(blank=True, max_length=500, null=True)),
                ('height', models.CharField(blank=True, max_length=50, null=True)),
                ('weight', models.CharField(blank=True, max_length=50, null=True)),
                ('injured', models.BooleanField(default=False)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('position', models.CharField(blank=True, max_length=50, null=True)),
                ('photo', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.IntegerField(primary_key=True, serialize=False)),
                ('team_name', models.CharField(blank=True, max_length=500, null=True)),
                ('team_faName', models.CharField(blank=True, max_length=500, null=True)),
                ('team_logo', models.URLField(blank=True, null=True)),
                ('team_code', models.CharField(blank=True, max_length=50, null=True)),
                ('team_country', models.CharField(blank=True, max_length=500, null=True)),
                ('team_faCountry', models.CharField(blank=True, max_length=500, null=True)),
                ('team_founded', models.IntegerField(blank=True, null=True)),
                ('team_national', models.BooleanField(default=False)),
                ('venue', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.league')),
            ],
        ),
        migrations.CreateModel(
            name='FixtureRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rounds', models.JSONField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.season')),
            ],
        ),
        migrations.CreateModel(
            name='Fixture',
            fields=[
                ('fixture_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('fixture_referee', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_faReferee', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_timestamp', models.IntegerField()),
                ('fixture_periods_first', models.IntegerField(null=True)),
                ('fixture_periods_second', models.IntegerField(null=True)),
                ('fixture_venue_name', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_venue_faName', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_venue_city', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_venue_faCity', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_status_long', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_status_short', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_status_elapsed', models.CharField(blank=True, max_length=250, null=True)),
                ('fixture_status_extra', models.CharField(blank=True, max_length=250, null=True)),
                ('league_round', models.CharField(max_length=100)),
                ('teams_home_winner', models.BooleanField(blank=True, null=True)),
                ('teams_away_winner', models.BooleanField(blank=True, null=True)),
                ('goals', models.JSONField(blank=True, max_length=250, null=True)),
                ('score_halftime', models.JSONField(blank=True, max_length=250, null=True)),
                ('score_fulltime', models.JSONField(blank=True, max_length=250, null=True)),
                ('score_extratime', models.JSONField(blank=True, max_length=250, null=True)),
                ('score_penalty', models.JSONField(blank=True, max_length=250, null=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fixtures', to='league.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fixtures', to='league.season')),
                ('teams_away', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='away_fixtures', to='league.team')),
                ('teams_home', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='home_fixtures', to='league.team')),
            ],
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('points', models.IntegerField()),
                ('goals_diff', models.IntegerField()),
                ('group', models.CharField(max_length=100)),
                ('form', models.CharField(max_length=50)),
                ('status', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('played', models.IntegerField()),
                ('win', models.IntegerField()),
                ('draw', models.IntegerField()),
                ('lose', models.IntegerField()),
                ('goals_for', models.IntegerField()),
                ('goals_against', models.IntegerField()),
                ('last_update', models.DateTimeField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
        ),
        migrations.CreateModel(
            name='FixtureStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ShotsOnGoal', models.IntegerField(blank=True, null=True)),
                ('ShotsOffGoal', models.IntegerField(blank=True, null=True)),
                ('ShotsInsideBox', models.IntegerField(blank=True, null=True)),
                ('ShotsOutsideBox', models.IntegerField(blank=True, null=True)),
                ('TotalShots', models.IntegerField(blank=True, null=True)),
                ('BlockedShots', models.IntegerField(blank=True, null=True)),
                ('Fouls', models.IntegerField(blank=True, null=True)),
                ('CornerKicks', models.IntegerField(blank=True, null=True)),
                ('Offsides', models.IntegerField(blank=True, null=True)),
                ('BallPossession', models.CharField(blank=True, max_length=10, null=True)),
                ('YellowCards', models.IntegerField(blank=True, null=True)),
                ('RedCards', models.IntegerField(blank=True, null=True)),
                ('GoalkeeperSaves', models.IntegerField(blank=True, null=True)),
                ('Totalpasses', models.IntegerField(blank=True, null=True)),
                ('Passesaccurate', models.IntegerField(blank=True, null=True)),
                ('PassesPercent', models.CharField(blank=True, max_length=10, null=True)),
                ('ExpectedGoals', models.FloatField(blank=True, null=True)),
                ('GoalsPrevented', models.IntegerField(blank=True, null=True)),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.fixture')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
        ),
        migrations.CreateModel(
            name='FixturePlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes', models.IntegerField(blank=True, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('captain', models.BooleanField(default=False)),
                ('substitute', models.BooleanField(default=False)),
                ('shots_total', models.IntegerField(blank=True, null=True)),
                ('shots_on', models.IntegerField(blank=True, null=True)),
                ('goals_total', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('saves', models.IntegerField(blank=True, null=True)),
                ('passes_total', models.IntegerField(blank=True, null=True)),
                ('passes_key', models.IntegerField(blank=True, null=True)),
                ('passes_accuracy', models.CharField(blank=True, max_length=10, null=True)),
                ('tackles_total', models.IntegerField(blank=True, null=True)),
                ('blocks', models.IntegerField(blank=True, null=True)),
                ('interceptions', models.IntegerField(blank=True, null=True)),
                ('duels_total', models.IntegerField(blank=True, null=True)),
                ('duels_won', models.IntegerField(blank=True, null=True)),
                ('dribbles_attempts', models.IntegerField(blank=True, null=True)),
                ('dribbles_success', models.IntegerField(blank=True, null=True)),
                ('dribbles_past', models.IntegerField(blank=True, null=True)),
                ('fouls_drawn', models.IntegerField(blank=True, null=True)),
                ('fouls_committed', models.IntegerField(blank=True, null=True)),
                ('cards_yellow', models.IntegerField(blank=True, null=True)),
                ('cards_yellow_red', models.IntegerField(blank=True, null=True)),
                ('cards_red', models.IntegerField(blank=True, null=True)),
                ('penalty_won', models.IntegerField(blank=True, null=True)),
                ('penalty_commited', models.IntegerField(blank=True, null=True)),
                ('penalty_scored', models.IntegerField(blank=True, null=True)),
                ('penalty_missed', models.IntegerField(blank=True, null=True)),
                ('penalty_saved', models.IntegerField(blank=True, null=True)),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.fixture')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
        ),
        migrations.CreateModel(
            name='FixtureLineup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_color', models.JSONField(blank=True, null=True)),
                ('formation', models.CharField(max_length=50)),
                ('coach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='league.coach')),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.fixture')),
                ('start_xi', models.ManyToManyField(blank=True, related_name='start_xi', to='league.player')),
                ('substitutes', models.ManyToManyField(blank=True, related_name='substitutes', to='league.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
        ),
        migrations.CreateModel(
            name='FixtureEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('detail', models.CharField(max_length=100)),
                ('comments', models.CharField(blank=True, max_length=200, null=True)),
                ('time_elapsed', models.IntegerField()),
                ('time_extra', models.IntegerField(blank=True, null=True)),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.fixture')),
                ('assist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assist_player', to='league.player')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='league.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
        ),
        migrations.AddField(
            model_name='coach',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team'),
        ),
        migrations.CreateModel(
            name='TeamStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form', models.CharField(blank=True, max_length=50, null=True)),
                ('fixtures_played_home', models.IntegerField(default=0)),
                ('fixtures_played_away', models.IntegerField(default=0)),
                ('fixtures_played_total', models.IntegerField(default=0)),
                ('wins_home', models.IntegerField(default=0)),
                ('wins_away', models.IntegerField(default=0)),
                ('wins_total', models.IntegerField(default=0)),
                ('draws_home', models.IntegerField(default=0)),
                ('draws_away', models.IntegerField(default=0)),
                ('draws_total', models.IntegerField(default=0)),
                ('losses_home', models.IntegerField(default=0)),
                ('losses_away', models.IntegerField(default=0)),
                ('losses_total', models.IntegerField(default=0)),
                ('goals_for_home', models.IntegerField(default=0)),
                ('goals_for_away', models.IntegerField(default=0)),
                ('goals_for_total', models.IntegerField(default=0)),
                ('goals_against_home', models.IntegerField(default=0)),
                ('goals_against_away', models.IntegerField(default=0)),
                ('goals_against_total', models.IntegerField(default=0)),
                ('clean_sheet_home', models.IntegerField(default=0)),
                ('clean_sheet_away', models.IntegerField(default=0)),
                ('clean_sheet_total', models.IntegerField(default=0)),
                ('failed_to_score_home', models.IntegerField(default=0)),
                ('failed_to_score_away', models.IntegerField(default=0)),
                ('failed_to_score_total', models.IntegerField(default=0)),
                ('penalties_scored_total', models.IntegerField(default=0)),
                ('penalties_missed_total', models.IntegerField(default=0)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_stats', to='league.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_stats', to='league.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_stats', to='league.team')),
            ],
        ),
        migrations.CreateModel(
            name='Squad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='squads', to='league.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='squads', to='league.team')),
            ],
            options={
                'unique_together': {('player', 'team')},
            },
        ),
        migrations.CreateModel(
            name='PlayerTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.player')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
            options={
                'unique_together': {('player', 'team', 'season')},
            },
        ),
        migrations.CreateModel(
            name='PlayerStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900)])),
                ('appearances', models.IntegerField(default=0, null=True)),
                ('lineups', models.IntegerField(default=0, null=True)),
                ('minutes_played', models.IntegerField(default=0, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('captain', models.BooleanField(default=False)),
                ('substitutesIn', models.IntegerField(default=0, null=True)),
                ('substitutesOut', models.IntegerField(default=0, null=True)),
                ('bench', models.IntegerField(default=0, null=True)),
                ('assists', models.IntegerField(default=0, null=True)),
                ('goalsTotal', models.IntegerField(default=0, null=True)),
                ('goalsConceded', models.IntegerField(default=0, null=True)),
                ('saves', models.IntegerField(default=0, null=True)),
                ('shotsTotal', models.IntegerField(default=0, null=True)),
                ('shotsOn', models.IntegerField(default=0, null=True)),
                ('passTotal', models.IntegerField(default=0, null=True)),
                ('passKey', models.IntegerField(default=0, null=True)),
                ('passAccuracy', models.FloatField(blank=True, null=True)),
                ('tacklesTotal', models.IntegerField(default=0, null=True)),
                ('blocks', models.IntegerField(default=0, null=True)),
                ('interceptions', models.IntegerField(default=0, null=True)),
                ('duelsTotal', models.IntegerField(default=0, null=True)),
                ('duelsWon', models.IntegerField(default=0, null=True)),
                ('dribbleAttempts', models.IntegerField(default=0, null=True)),
                ('dribbleSuccess', models.IntegerField(default=0, null=True)),
                ('dribblePast', models.IntegerField(default=0, null=True)),
                ('foulsDrawn', models.IntegerField(default=0, null=True)),
                ('foulsCommitted', models.IntegerField(default=0, null=True)),
                ('cardsYellow', models.IntegerField(default=0, null=True)),
                ('cardsYellowRed', models.IntegerField(default=0, null=True)),
                ('cardsRed', models.IntegerField(default=0, null=True)),
                ('penaltyWon', models.IntegerField(default=0, null=True)),
                ('penaltyCommited', models.IntegerField(default=0, null=True)),
                ('penaltyScored', models.IntegerField(default=0, null=True)),
                ('penaltyMissed', models.IntegerField(default=0, null=True)),
                ('penaltySaved', models.IntegerField(default=0, null=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.league')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='league.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
            options={
                'unique_together': {('player', 'team', 'league', 'season')},
            },
        ),
        migrations.CreateModel(
            name='TeamLeague',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.league')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.team')),
            ],
            options={
                'unique_together': {('team', 'league', 'season')},
            },
        ),
    ]
